BluNote LTI Plugin Blueprint

1. Objective
   - Deliver an LTI 1.3 compliant BluNote extension that embeds a ChatKit-driven interface and routes all dynamic behaviors through AgentKit orchestrations.

2. Platform Setup
   - Provision BluNote LTI developer keys (client_id, deployment_id, keyset URL, auth endpoints).
   - Configure local `.env` with LTI credentials, ChatKit API key, and AgentKit token.
   - Scaffold repo structure:
       /frontend (ChatKit UI)
       /backend  (AgentKit services + LTI launch handler)

3. ChatKit Interface Plan
   - Use ChatKit `ChatApp`, `MessageList`, and `Composer` components to render the learner chat.
   - Surface context panes for syllabus, assignments, and AI suggestions using `Panel` / `Sidebar` primitives.
   - Wire LTI launch params into the ChatKit store to personalize the session (user name, course, roles).
   - Expose UI actions:
       • Ask BluNote assistant (default)
       • Request study plan
       • Submit reflective journal
   - Implement optimistic updates and streaming message support for smooth UX.

4. AgentKit Backend Plan
   - Build an AgentKit agent with capabilities:
       • Knowledge retrieval (BluNote content, LMS resources via REST/GraphQL)
       • Task planning (generate study or action plans)
       • Submission drafting (journal templates)
   - Define functions for:
       • `fetch_course_assets(course_id)`
       • `log_reflection(user_id, course_id, text)`
       • `create_todo_items(user_id, course_id, tasks[])`
   - Host the agent in the backend service with webhooks that ChatKit can call.
   - Maintain conversation state keyed by LTI launch identifiers.

5. LTI Workflow
   - Launch: handle `POST /lti/launch` to validate JWT, fetch user/course context, start ChatKit session.
   - Deep linking: optionally supply ChatKit placements through LTI content selection.
   - Grade return: expose `POST /lti/submit` to transform AgentKit outputs into score/service calls.
   - Data privacy: store only necessary PII, respect LMS retention policies.

6. Integration Steps
   1) Implement backend launch controller (Node/Express or preferred stack).
   2) Stand up AgentKit agent and register functions above.
   3) Create ChatKit frontend, connect to backend via WebSocket/REST.
   4) Test end-to-end in platform sandbox (Canvas/Moodle/Schoology).
   5) Harden security (nonce/session checks, HTTPS).

7. Testing & QA
   - Unit tests for AgentKit function handlers.
   - Mock LTI launch tokens for local development.
   - UI smoke tests for ChatKit components.
   - Accessibility review (WCAG 2.1 AA) for embedded tool.

8. Deployment Checklist
   - Configure production LTI credentials and redirect URIs.
   - Enable monitoring/logging (structured logs + tracing).
   - Document admin installation guide and faculty quickstart.

9. Next Actions
   - [ ] Commit repo scaffolding.
   - [ ] Build LTI launch validator and session bootstrap.
   - [ ] Prototype ChatKit UI with mocked AgentKit responses.
   - [ ] Implement AgentKit functions and connect to data sources.
   - [ ] Run pilot with target LMS course.
